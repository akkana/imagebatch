#!/usr/bin/env python

# resizeall: batch-resize images.
# Copyright 2020 by Akkana Peck.
# You may use, distribute and modify this program under the terms of the GPL.
# Edited by Nick Hill, July 2003 to add support for spaces in filenames.

from __future__ import print_function

import sys, os
import subprocess
import argparse
from PIL import Image, ImageFilter


def resize_file(filename, outfile, size, scale, dropshadow, force):
    # Get the image size. GEGL can't do this even if it's used for the resize.
    img = Image.open(filename)

    if outfile != filename and not force:
        if os.path.exists(outfile):
            print("Not overwriting", outfile)
            return

    if size:                         # Size of long dimension specified
        if img.width >= img.height:  # landscape
            new_width = size
            new_height = img.height * size / img.width
        else:                        # portrait
            new_height = size
            new_width = img.width * size / img.height
    else:                            # scale, aspect will take care of itself
        new_width = img.width * scale
        new_height = img.height * scale

    new_width = int(new_width)
    new_height = int(new_height)

    if not new_width or not new_height:
        raise(RuntimeError("Couldn't calculate new dimensions for " + filename
                           + f": current size {img.width}x{img.height}"))
    print("Rescaling", filename, "to", new_width, new_height)

    scaled = img.resize((new_width, new_height),
                        resample=Image.LANCZOS)
    if dropshadow:
        scaled = make_dropshadow(scaled)

    # Preserve the original EXIF when saving.
    try:
        exifinfo = img.info['exif']
        scaled.save(outfile, exif=exifinfo)
    except:
        scaled.save(outfile)
    print("Saved", outfile)


def make_dropshadow(image, iterations=7, border=0, offset=(7, 7),
                    background_color=0xffffff, shadow_color=0x444444):
    """Return an image with a drop shadow added.
       image: input imate
       iterations: how many times to run the blur filter'
       border: ??
       offset: (x, y) offset of the shadow
    """
    # Calculate the size of the shadow's image
    fullWidth  = image.size[0] + abs(offset[0]) + 2*border
    fullHeight = image.size[1] + abs(offset[1]) + 2*border

    #Create the shadow's image. Match the parent image's mode.
    shadow = Image.new(image.mode, (fullWidth, fullHeight), background_color)

    # Place the shadow, with the required offset
    shadowLeft = border + max(offset[0], 0) #if <0, push the rest of the image right
    shadowTop  = border + max(offset[1], 0) #if <0, push the rest of the image down
    # Paste in the constant colour
    shadow.paste(shadow_color,
                 [shadowLeft, shadowTop,
                  shadowLeft + image.size[0],
                  shadowTop  + image.size[1] ])

    # Apply the BLUR filter repeatedly
    for i in range(iterations):
        shadow = shadow.filter(ImageFilter.BLUR)

    # Paste the original image on top of the shadow
    imgLeft = border - min(offset[0], 0) #if the shadow offset was <0, push right
    imgTop  = border - min(offset[1], 0) #if the shadow offset was <0, push down
    shadow.paste(image, (imgLeft, imgTop))

    return shadow



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Batch-resize files")
    parser.add_argument("--size", dest="size", type=int, action="store",
                        help="New size of long dimension")
    parser.add_argument("--scale", dest="scale", type=float, action="store",
                        help="Scale, e.g. 2 or .5")
    parser.add_argument('-t', "--thumbnail", dest="thumbnail", default=False,
                        action="store_true",
                        help="Make thumbnails: size 200, default dropshadow")
    parser.add_argument('-n', "--nodrop", dest="nodrop", default=False,
                        action="store_true",
                        help="Omit shadows when making thumbnails")
    parser.add_argument('-f', "--force", dest="force", default=False,
                        action="store_true",
                        help="Force: overwrite even when called as mkthumb")
    parser.add_argument('files', nargs='+', help="Image files to resize")
    args = parser.parse_args(sys.argv[1:])

    if os.path.basename(sys.argv[0]).startswith("mkthumb"):
        args.thumbnail = True
    if args.thumbnail:
        dropshadow = not args.nodrop
        if not args.size:
            args.size = 200
    else:
        dropshadow = False

    if not args.size and not args.scale:
        print("\nYou must specify either --size or --scale")
        parser.print_help()
        sys.exit(1)

    for f in args.files:
        if args.thumbnail:
            path, ext = os.path.splitext(f)
            outfilename = path + 'T' + ext
        else:
            outfilename = f

        resize_file(f, outfilename, args.size, args.scale,
                    dropshadow, args.force)
